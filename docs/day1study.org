Study Notes for popl
* Topics to be taught
- Values
- types and expressions.
- Abstract syntax.
- Contract Backus-Naur form.
- Block structure and lexical environments.
- Scope and binding.
- Procedures and closures.
- Recursion.
- Implementing recursion.
- Stores.
- Computational effects.
- Explicit and implicit references.
- Implementing mutation.
- Expressible and denotable values.
- Parameter passing.
- Tail recursion.
- Iterative systems.
- Continuation-passing style (CPS).
- Converting to CPS.
- Continuation-passing interpreters.
- Trampolining.
- Imperative interpreters.
- Modeling exceptions and threads.

* Advanced topics (if time permits):
  - Type checking.
  - Term unification.
  - Type reconstruction.
  - Logic Programming.

* Day 1 Study:
** Understanding on Mathematics topics:
+ Sets
+ functions
+ relations

** What is programming language
+ Answer:
 -  To answer this, first : What is programming language?
 -  a program is an input to a machine(vm like in jvm) and the machine outputs the answer.
** Approaches to study programming languages:
+ Compiling:
  - How the program is converted from one lang to other (possibly to low-level language)
+ Mathematical specification of programming languages:
  - The meaning of every program is given by a mathematical specification of the semantics of its underlying programming language. Three main approaches exist:
      + denotational, where programs and the programming language are mapped to a set of continuous functions over complete partial orders, 
      + operational, where the meaning of a program is explicated as a sequence of transition rules on a virtual machine, or
      + axiomatic semantics, where programs are thought of as predicate transformers. The mathematical semantics approach will be taught in an advanced course. 
+ Definitional Interpreters
  -  interpreters, each a virtual machine for a mini language with specific features.
** The Racket Guide [[http://docs.racket-lang.org/guide/intro.html][Ch 1-6]]
+ Welcome to Racket
+ Racket essentials
+ Built-in data types
+ Expressions and Defnitions
+ Programmer defined data types
+ Modules

* Day 2 Study: <2014-08-06 Wed>
** My first scheme program
#+BEGIN_SRC scheme :tangle program1.scm
define hello-world
   (lambda ()
         (begin
	(write `Hello-World)
            (newline)
	(hello-world))))

;; to execute: it can be done in drracket, emacs
;; in *defnition window* paste the above code, hit C-r to run the program
;; in *Interactions window* type the function name i.e hello-world
#+END_SRC
+ For running in emacs: follow the [[link][http://community.schemewiki.org/?emacs-tutorial]]
** talking to scheme:
+ Key point to note here: there are many flavors of scheme.
  - simply scheme from berkley. This is just scheme, with additioinal .scm files to be loaded at the startup of any scheme interpreter.
  - The other and preferred one in IIIT is DR.Racket's version of scheme. We need to specify saying /\#lang scheme/ at the beginning of the scheme file.
+ scheme + shell + textEditor
+ simply.scm is a file with all the scheme premitives written by scheme authors.
* Day 3 Study: <2014-08-07 Thu>
** continuting with Dr.Racket
+ understood the basic primitives usage on racket: 
  - #lang slideshow: to use shapes.
  - circle and rectangle as example shapes /(circle 10)/
  - hc-append : horizontly and centered-vertically append the shapes.
+ defnitions: while declating defnitions, just give a variable name beside defnition name, that variable name is now argument name as in *void fun(char a)* in c.
#+BEGIN_SRC scheme
;;example 1
;; define is used to start scheme.
(define c(circle 10))

;;example2
(define (square n)
  ;use **filled-rectangle** function
  (filled-rectangle n n))

;; usage: > (square 10)
#+END_SRC
+ Local Binding: A function can be defined inside a function and can be called.
#+BEGIN_SRC C
void a(a)
{

int b() { printf ("sai");}
b();
}

// This for sure is not possible in C. But it is possible in scheme and is called Local Binding.
#+END_SRC
#+BEGIN_SRC Scheme
(define (four p)
  (define two-p (hc-append p p))
  (vc-append two-p two-p))

;;> (four (circle 10))
#+END_SRC
+ Functions and values: Function in Scheme is considered as a values. Since functions are values, we can define functions that expect other functions as arguments.
  - In the below example series function takes circle as an argument. 
  - (series (*circle*))
#+BEGIN_SRC scheme
(define (series mk)
  (hc-append 4 (mk 5) (mk 10) (mk 20)))
#+END_SRC
